<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:aop="http://www.springframework.org/schema/aop"
      xsi:schemaLocation="http://www.springframework.org/schema/beans 
      						http://www.springframework.org/schema/beans/spring-beans.xsd
      						http://www.springframework.org/schema/aop 
      					 	http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- memo.xml -->
	
	<!-- 주 업무 객체 -->
	<bean id="memo" class="com.test.spring.aop.Memo"></bean>

	<!-- 보조 업무 객체 -->
	<bean id="logger" class="com.test.spring.aop.Logger"></bean>
	<bean id="auth" class="com.test.spring.aop.Auth"></bean>

	<!-- 
		AOP 설정
		- 주 업무 객체와 보조업무 객체를 연결시키며
		  어떤 주 업무와 어떤 보조 업무를 어떤 형태로 결합시킬지 설정한다. 
	-->
	<aop:config>
		
		<!-- aspect: 보조 업무 객체를 지정한다.(역할 부여) -->
		<aop:aspect id="loggerAdvice" ref="logger">
		
			<!--  
				주 업무를 지정한다.
				: 어떤 주 업무 객체의 어떤 메소드를 지정할 것인지 선택하기.
				ex) Memo 객체의 add() 메소드 -> 여기서 메소드는 포인트 컷(Point Cut) 이라고 한다.
			-->
			
			<!-- 포인트 컷 지정하기 :  AspectJ 표현식을 사용해서 지정한다! -->
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.add(String))" id="m1"/>
			<aop:pointcut expression="execution(public int com.test.spring.aop.Memo.search(String))" id="m2"/>
			
			<!-- logger 보조 업무 객체의 어떤 보조 업무(메소드)와 어떤 주 업무(포인트 컷)을 어떤 형태로 결합시킬지? -->
			<!-- <aop:after method="log" pointcut-ref="m1" /> -->

			<!-- Logger.before() -> Memo.add() -->
			<!-- <aop:before method="before" pointcut-ref="m1" /> -->

			<!-- Memo.add() -> Logger.after() -->
			<!-- <aop:after method="after" pointcut-ref="m1" /> -->

			<!-- <aop:around method="around" pointcut-ref="m1" /> -->

			<!-- <aop:after-throwing method="afterthrowing" pointcut-ref="m1" throwing="e" /> -->

			<!-- <aop:after-returning method="afterreturning" pointcut-ref="m2" returning="obj" /> -->
			
		</aop:aspect>		
		
		<aop:aspect id="authAdvice" ref="auth">
		
			<!-- 모든 주 업무(add, edit, del, read, search)를 지정하는 포인트컷 -->
			<!--  *: 와일드카드, 모든걸 포함한다는 뜻-->
			<!--  (..): 매개변수, 자료형을 상관없이 받아오겠다. -->
			<!--  
			<aop:pointcut expression="execution(public * com.test.spring.aop.Memo.*(..))" id="m1"/>
			<aop:before method="check" pointcut-ref="m1"/>
			-->
			
			<!-- 예제1) 쓰기, 수정, 삭제하기 3가지만 포인트컷하기 -->
			<aop:pointcut expression="execution(public * com.test.spring.aop.Memo.add(..)) || 
										execution(public * com.test.spring.aop.Memo.edit(..)) ||
										execution(public * com.test.spring.aop.Memo.del(..))" id="m2"/>
			<aop:before method="check" pointcut-ref="m2"/>
			
			
			<!-- 
				예제2) 예제1에서 쓰기, 수정, 삭제 3가지만 있었지만 포인크컷할 개수가 만약 50개.. 100개라면?
						-> 클래스를 분리한다. (but 보조업무를 위해 분리는 좀 그렇다!)
						-> 공통점을 만든다.. (메소드명에 member 붙이기)  
			-->
			<aop:pointcut expression="execution(public * com.test.spring.aop.Memo.member*(..))" id="m3"/>
			<aop:before method="check" pointcut-ref="m3"/>
			
			
		</aop:aspect>		
		
	</aop:config>


	
</beans>







